'''
Author: zh33rmao
Date: 2022-03-16 09:57:38
LastEditTime: 2022-03-16 10:58:48
LastEditors: Please set LastEditors
Description: 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
FilePath: \desire_lines\desire_lines_dialog.py
'''
# -*- coding: utf-8 -*-
from PyQt5.QtGui import QColor
from qgis._core import QgsMapLayerProxyModel, QgsVectorLayer, QgsField, QgsProject, QgsFeature, QgsGeometry, QgsSymbol, \
    QgsRendererRange, QgsGraduatedSymbolRenderer

"""
/***************************************************************************
 DesireLinesDialog
                                 A QGIS plugin
 This plugin draws desirelines
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-03-16
        git sha              : $Format:%H$
        copyright            : (C) 2022 by zh33rmao
        email                : zh2ermao@dingtalk.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import pandas as pd
from qgis.gui import QgsMessageBar
from . import data

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'desire_lines_dialog_base.ui'))


class DesireLinesDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(DesireLinesDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pbPrintHelloWorld.clicked.connect(self.print_hello_world)
        self.mlcbPointLayer.setFilters(QgsMapLayerProxyModel.VectorLayer)
        self.cbPointLayerField.setLayer(self.mlcbPointLayer.currentLayer())
        self.mlcbPointLayer.layerChanged.connect(self.cbPointLayerField.setLayer)
        self.leDate.setInputMask("00000000")


    def test(self):
        path = self.qfwGetODPath.filePath()
        # msg = QgsMessageBar()
        # msg.pushMessage(path)
        # print(type(self.leDate.text()))
        flname = self.leLineID.text()
        dealrq = self.leDate.text()
        cod = data.CalculateOD(path, flname, dealrq)
        df = cod.calOD()


    def print_hello_world(self):
        from qgis.PyQt.QtCore import QVariant
        path = self.qfwGetODPath.filePath()
        flname = self.leLineID.text()
        dealrq = self.leDate.text()
        layer = self.mlcbPointLayer.currentLayer()
        field = self.cbPointLayerField.currentField()
        # print("cf : {0}; type: {1}".format(field, type(field)))
        features = layer.getFeatures()

        pair = dict()

        for feature in features:
            # 检索每一个要素的几何和属性
            # print("Feature ID: ", feature.id())
            # 获取几何
            geom = feature.geometry()
            # 获取属性
            attrs = feature.attributes()
            key = feature[field]
            # print(type(feature[field]))
            value = geom
            pair[key] = value

        # create layer
        vl = QgsVectorLayer("LineString", "desire_lines", "memory")
        pr = vl.dataProvider()

        # add fields
        pr.addAttributes([QgsField("edgeid", QVariant.Int),
                          QgsField("origin", QVariant.String),
                          QgsField("destination", QVariant.String),
                          QgsField("value", QVariant.Int)])
        vl.updateFields()  # tell the vector layer to fetch changes from the provider

        cod = data.CalculateOD(path, flname, dealrq)
        od = cod.calOD()

        min_s = od[0:]['vol']
        min = max = min_s[0]
        # print(od[0:])
        print("min: {0}".format(type(min)))

        for index, row in od.iterrows():
            # 检索每一个要素的几何和属性
            # print("Feature ID: ", feature.id())
            # 获取几何
            ori = row['fOsname']
            # print(type(ori))
            dest = row['fDsname']
            value = row['vol']
            # 计算最大最小值
            if(min > value):
                min = value
            if (max < value):
                max = value
            # add a feature
            fet = QgsFeature()
            print("ori: {0}; dest: {1}".format(pair.get(ori), pair.get(dest)))
            # print(type(QgsGeometry.fromPolylineXY([pair.get(ori).asPoint(),pair.get(dest).asPoint()]).asPolyline()))
            try:
                fet.setGeometry(QgsGeometry.fromPolylineXY([pair.get(ori).asPoint(), pair.get(dest).asPoint()]))
                fet.setAttributes([1, ori, dest, value])
                pr.addFeatures([fet])
            except AttributeError:
                print("point not found")
                continue
        vl.updateExtents()
        QgsProject.instance().addMapLayer(vl)
        self.apply_graduated_symbology(vl, 'value', min, max)

    def apply_graduated_symbology(self, join_layer, target_field, min_val, max_val):
        """Creates Symbology for each value in range of values.
            Values are # of patients per zip code.
            Hard codes min value, max value, symbol (color), and label for each range of
            values. Then QgsSymbolRenderer takes field from attribute table and item from
            myRangeList and applies them to join_layer. Color values are hex codes,
            in a graduated fashion from light pink to black depending on intensity"""

        step = (max_val - min_val) / 5
        myRangeList = []

        symbol = QgsSymbol.defaultSymbol(join_layer.geometryType())
        symbol.setColor(QColor("#07bb2a"))
        symbol.setWidth(0.1)
        myRange = QgsRendererRange(min_val, min_val + step, symbol, '{0} - {1}'.format(min_val, min_val + step))
        myRangeList.append(myRange)

        symbol = QgsSymbol.defaultSymbol(join_layer.geometryType())
        symbol.setColor(QColor("#99e907"))
        symbol.setWidth(0.5)
        myRange = QgsRendererRange(min_val + step, min_val + 2 * step, symbol, '{0} - {1}'.format(min_val + step, min_val + 2 * step))
        myRangeList.append(myRange)

        symbol = QgsSymbol.defaultSymbol(join_layer.geometryType())
        symbol.setColor(QColor("#e9e007"))
        symbol.setWidth(1)
        myRange = QgsRendererRange(min_val + 2 *step, min_val + 3 * step, symbol, '{0} - {1}'.format(min_val+ 2 * step, min_val + 3 * step))
        myRangeList.append(myRange)

        symbol = QgsSymbol.defaultSymbol(join_layer.geometryType())
        symbol.setColor(QColor("#f46406"))
        symbol.setWidth(1.5)
        myRange = QgsRendererRange(min_val + 3 * step, min_val + 4 * step, symbol, '{0} - {1}'.format(min_val+ 3 * step, min_val + 4 * step))
        myRangeList.append(myRange)

        symbol = QgsSymbol.defaultSymbol(join_layer.geometryType())
        symbol.setColor(QColor("#f41406"))
        symbol.setWidth(2)
        myRange = QgsRendererRange(min_val + 4 * step, max_val, symbol, '{0} - {1}'.format(min_val + 4 * step, max_val))
        myRangeList.append(myRange)

        myRenderer = QgsGraduatedSymbolRenderer(target_field, myRangeList)
        myRenderer.setMode(QgsGraduatedSymbolRenderer.Custom)

        join_layer.setRenderer(myRenderer)
        join_layer.triggerRepaint()

        print(f"Graduated color scheme applied")

    def desireline_from_layer(self):
        from qgis.PyQt.QtCore import QVariant
        # iface = qgis.utils.iface
        layer = self.mlcbPointLayer.currentLayer()
        field = self.cbPointLayerField.currentField()
        print("cf : {0}; type: {1}".format(field, type(field)))
        features = layer.getFeatures()

        pair = dict()

        for feature in features:
            # 检索每一个要素的几何和属性
            # print("Feature ID: ", feature.id())
            # 获取几何
            geom = feature.geometry()
            # 获取属性
            attrs = feature.attributes()
            key = feature[field]
            # print(type(feature[field]))
            value = geom
            pair[key] = value

        # create layer
        vl = QgsVectorLayer("LineString", "desire_lines", "memory")
        # vl = iface.addVectorLayer("f:\\dl.shp", "Ports layer", "ogr")
        pr = vl.dataProvider()

        # add fields
        pr.addAttributes([QgsField("edgeid", QVariant.Int),
                          QgsField("origin", QVariant.String),
                          QgsField("destination", QVariant.String),
                          QgsField("value", QVariant.Int)])
        vl.updateFields()  # tell the vector layer to fetch changes from the provider

        layer = QgsProject.instance().mapLayersByName("od")[0]
        features = layer.getFeatures()

        for feature in features:
            # 检索每一个要素的几何和属性
            # print("Feature ID: ", feature.id())
            # 获取几何
            ori = feature['fOsname']
            # print(type(ori))
            dest = feature['fDsname']
            value = feature['vol']
            # 获取属性
            attrs = feature.attributes()
            print("ori: {0}; dest: {1}; value: {2}".format(ori, dest, value))
            # add a feature
            fet = QgsFeature()
            print("ori: {0}; dest: {1}".format(pair.get(ori), pair.get(dest)))
            # print(type(QgsGeometry.fromPolylineXY([pair.get(ori).asPoint(),pair.get(dest).asPoint()]).asPolyline()))
            try:
                fet.setGeometry(QgsGeometry.fromPolylineXY([pair.get(ori).asPoint(), pair.get(dest).asPoint()]))
                fet.setAttributes([1, ori, dest, value])
                pr.addFeatures([fet])
            except AttributeError:
                print("point not found")
                continue

        vl.updateExtents()
        QgsProject.instance().addMapLayer(vl)
